# dynamic_position_sizing.py
"""
–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ –∏ sentiment
"""

import numpy as np
import torch
import torch.nn as nn
from typing import Tuple, Dict

class ConfidenceBasedPositionSizer:
    def __init__(self, 
                 min_position_pct=0.05,  # 5% –º–∏–Ω–∏–º—É–º
                 max_position_pct=0.20,  # 20% –º–∞–∫—Å–∏–º—É–º
                 base_position_pct=0.10): # 10% –±–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä
        self.min_position_pct = min_position_pct
        self.max_position_pct = max_position_pct
        self.base_position_pct = base_position_pct
        
    def calculate_position_size(self, 
                              action_probabilities: torch.Tensor,
                              sentiment_score: float,
                              current_balance: float,
                              current_price: float,
                              market_conditions: Dict = None) -> float:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
        1. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ (action probabilities)
        2. –°–∏–ª—ã sentiment —Å–∏–≥–Ω–∞–ª–∞
        3. –¢–µ–∫—É—â–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        
        Returns: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –¥–ª—è –ø–æ–∫—É–ø–∫–∏
        """
        
        # 1. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ (0 –¥–æ 1)
        max_prob = torch.max(action_probabilities).item()
        model_confidence = max_prob  # –ß–µ–º –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —Ç–µ–º —É–≤–µ—Ä–µ–Ω–Ω–µ–µ –º–æ–¥–µ–ª—å
        
        # 2. –°–∏–ª–∞ sentiment —Å–∏–≥–Ω–∞–ª–∞ (0 –¥–æ 1)
        sentiment_strength = abs(sentiment_score)  # |sentiment| –æ—Ç 0 –¥–æ 1
        
        # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        # –ú–æ–¥–µ–ª—å —É–≤–µ—Ä–µ–Ω–∞ –ò sentiment —Å–∏–ª—å–Ω—ã–π = –±–æ–ª—å—à–∞—è –ø–æ–∑–∏—Ü–∏—è
        combined_confidence = (model_confidence * 0.6 + sentiment_strength * 0.4)
        
        # 4. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        additional_multiplier = 1.0
        
        if market_conditions:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility = market_conditions.get('volatility', 0.5)
            if volatility < 0.3:
                additional_multiplier *= 1.2
            elif volatility > 0.7:
                additional_multiplier *= 0.8
                
            # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π drawdown
            drawdown = market_conditions.get('drawdown', 0)
            if drawdown < -0.10:  # –ï—Å–ª–∏ –ø—Ä–æ—Å–∞–¥–∫–∞ –±–æ–ª—å—à–µ 10%
                additional_multiplier *= 0.7  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∏—Å–∫
        
        # 5. –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞
        position_pct = (self.min_position_pct + 
                       (self.max_position_pct - self.min_position_pct) * combined_confidence)
        
        position_pct *= additional_multiplier
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª–∞–º–∏
        position_pct = np.clip(position_pct, self.min_position_pct, self.max_position_pct)
        
        # 6. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü
        position_value = current_balance * position_pct
        position_size = position_value / current_price
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"üéØ Position Sizing:")
        print(f"   Model confidence: {model_confidence:.3f}")
        print(f"   Sentiment strength: {sentiment_strength:.3f}")
        print(f"   Combined confidence: {combined_confidence:.3f}")
        print(f"   Position %: {position_pct:.1%}")
        print(f"   Position size: {position_size:.4f} units")
        print(f"   Position value: ${position_value:.2f}")
        
        return position_size

class EnhancedTradingEnvironment:
    """
    –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å—Ä–µ–¥–∞ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
    """
    
    def __init__(self, data, initial_balance=10000, commission=0.001):
        # –í–∞—à–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...
        self.data = data
        self.initial_balance = initial_balance
        self.commission = commission
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º position sizer
        self.position_sizer = ConfidenceBasedPositionSizer(
            min_position_pct=0.05,  # 5%
            max_position_pct=0.20,  # 20%
            base_position_pct=0.10  # 10%
        )
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–µ–¥—ã
        self.current_step = 0
        self.balance = initial_balance
        self.position = 0  # 0: –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1: –ª–æ–Ω–≥
        self.position_size = 0.0
        self.entry_price = 0.0
        
        # –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.equity_history = []
        self.volatility_window = 24  # 24 —á–∞—Å–∞
        
    def step(self, action, action_probabilities):
        """
        –®–∞–≥ —Å—Ä–µ–¥—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–º–µ—Ä–æ–º –ø–æ–∑–∏—Ü–∏–∏
        """
        current_price = self.data['GOLD_Close'].iloc[self.current_step]
        current_sentiment = self.data['sentiment'].iloc[self.current_step]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        market_conditions = self._get_market_conditions()
        
        reward = 0
        
        if action == 1:  # BUY
            if self.position == 0:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–µ–π
                
                # üî• –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –†–ê–ó–ú–ï–† –ü–û–ó–ò–¶–ò–ò
                dynamic_position_size = self.position_sizer.calculate_position_size(
                    action_probabilities=action_probabilities,
                    sentiment_score=current_sentiment,
                    current_balance=self.balance,
                    current_price=current_price,
                    market_conditions=market_conditions
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –¥–µ–Ω–µ–≥
                required_money = dynamic_position_size * current_price * (1 + self.commission)
                
                if required_money <= self.balance:
                    self.position = 1
                    self.position_size = dynamic_position_size
                    self.entry_price = current_price
                    self.balance -= required_money
                    
                    # –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    confidence_bonus = torch.max(action_probabilities).item()
                    reward += confidence_bonus * 5 + abs(current_sentiment) * 3
                    
                else:
                    # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ
                    max_possible_size = (self.balance * 0.95) / (current_price * (1 + self.commission))
                    if max_possible_size > 0:
                        self.position = 1
                        self.position_size = max_possible_size
                        self.entry_price = current_price
                        self.balance -= max_possible_size * current_price * (1 + self.commission)
                        reward += 1  # –ú–µ–Ω—å—à–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —á–∞—Å—Ç–∏—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                    
        elif action == 2:  # SELL
            if self.position == 1:  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                
                # –ü—Ä–æ–¥–∞–µ–º –≤—Å—é –ø–æ–∑–∏—Ü–∏—é
                sale_proceeds = self.position_size * current_price * (1 - self.commission)
                self.balance += sale_proceeds
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
                profit = (current_price - self.entry_price) * self.position_size
                profit_pct = profit / (self.entry_price * self.position_size)
                
                # –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
                reward += profit_pct * 100 * (self.position_size / (self.balance / current_price))
                
                # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ sentiment
                if current_sentiment < -0.1:  # –ü—Ä–æ–¥–∞–µ–º –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–º sentiment
                    reward += abs(current_sentiment) * 5
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.position = 0
                self.position_size = 0.0
                self.entry_price = 0.0
        
        # Hold (action == 0) - –∞–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        else:
            if abs(current_sentiment) < 0.1:
                reward += 0.5  # –ë–æ–Ω—É—Å –∑–∞ hold –ø—Ä–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
            else:
                reward -= 0.2  # –õ–µ–≥–∫–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–ø—É—Å–∫ —Å–∏–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        current_equity = self.balance
        if self.position == 1:
            current_equity += self.position_size * current_price
            
        self.equity_history.append(current_equity)
        if len(self.equity_history) > self.volatility_window:
            self.equity_history.pop(0)
        
        self.current_step += 1
        done = self.current_step >= len(self.data) - 1
        
        return self._get_observation(), reward, done, False, {
            'position_size': self.position_size,
            'position_value_pct': (self.position_size * current_price) / current_equity if current_equity > 0 else 0
        }
    
    def _get_market_conditions(self) -> Dict:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è"""
        conditions = {}
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ equity
        if len(self.equity_history) >= 5:
            returns = np.diff(self.equity_history) / self.equity_history[:-1]
            conditions['volatility'] = np.std(returns) * np.sqrt(24 * 365)  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        else:
            conditions['volatility'] = 0.5  # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –¢–µ–∫—É—â–∏–π drawdown
        if self.equity_history:
            peak = max(self.equity_history)
            current = self.equity_history[-1]
            conditions['drawdown'] = (current - peak) / peak if peak > 0 else 0
        else:
            conditions['drawdown'] = 0
        
        return conditions
    
    def _get_observation(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è - –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –≤–∞—à—É –º–æ–¥–µ–ª—å"""
        # –ó–¥–µ—Å—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è observation
        # –í–∫–ª—é—á–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ä–∞–∑–º–µ—Ä–µ –ø–æ–∑–∏—Ü–∏–∏
        pass

# –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è PPO –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏
class ConfidenceAwarePPOAgent:
    """PPO –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç action probabilities –¥–ª—è position sizing"""
    
    def __init__(self, state_dim, action_dim, lr=1e-4):
        # –í–∞—à–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PPO...
        pass
    
    def select_action_with_probabilities(self, state, memory):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –ò –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ sizing
        """
        with torch.no_grad():
            state_tensor = torch.FloatTensor(state).to(self.device).unsqueeze(0)
            action_probs, _ = self.policy_old(state_tensor)
            
            dist = Categorical(action_probs)
            action = dist.sample()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            memory.states.append(state_tensor)
            memory.actions.append(action)
            memory.logprobs.append(dist.log_prob(action))
            
            return action.item(), action_probs.squeeze(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏