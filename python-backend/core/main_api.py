import os
import sys
import time
import threading
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–µ–Ω–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å.
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, core, ml) –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
# SWF4/python-backend/core/main_api.py -> SWF4/python-backend
BACKEND_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BACKEND_ROOT))

# --- –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏ ---
# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: TradingWorker -> TradingBot, –¥–æ–±–∞–≤–ª–µ–Ω RealNewsAPIClient
from core.capital_request import CapitalComAPI
from core.live_rl_trading import (
    PPOAgent, 
    TradingBot,  # ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ —Å TradingWorker –Ω–∞ TradingBot
    LOOKBACK_WINDOW, 
    FEATURE_COLUMNS, 
    TRADING_EPIC, 
    RESOLUTION,
    MODEL_PATH,  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MODEL_PATH –≤–º–µ—Å—Ç–æ TRADE_SIZE
    UPDATE_INTERVAL_SECONDS  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç UPDATE_INTERVAL_SECONDS
)
from core.real_news_api import RealNewsAPIClient  # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ API

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ config ---
config_path = BACKEND_ROOT / 'config' / '.env'
if config_path.exists():
    logging.info(f"Loading .env file from: {config_path}")
    load_dotenv(dotenv_path=config_path)
else:
    logging.warning(f".env file not found at {config_path}. Falling back to default search.")
    load_dotenv()

# --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ ---
# –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç (—Ç.–µ. –≤ –ø–∞–ø–∫–µ 'core')
MODELS_DIR = Path(__file__).resolve().parent
MODEL_NAME_PATTERN = "rl_gold_trader_model"
ABSOLUTE_MODEL_PATH = None

if MODELS_DIR.exists():
    for f in MODELS_DIR.iterdir():
        # –ò—â–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—à–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .pth
        if f.name.startswith(MODEL_NAME_PATTERN) and f.name.endswith(".pth"):
            ABSOLUTE_MODEL_PATH = f
            logging.info(f"Found model file: {f.name}")
            break # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É ---
trading_bot = None  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
app_state: Dict[str, Any] = {
    "portfolio_metrics": { "equity": 10000.0, "cash": 10000.0, "total_trades": 0 },
    "open_positions": [],
    "chart_data": { "labels": [], "prices": [] },
    "logs": [],
}
state_lock = threading.Lock()

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FastAPI (Pydantic) ---
class PortfolioMetrics(BaseModel):
    equity: float
    cash: float
    total_trades: int

class OpenPosition(BaseModel):
    ticker: str
    size: float
    entry_price: float
    current_price: float
    pnl: float

class ChartData(BaseModel):
    labels: List[str]
    prices: List[float]

class PnLPeriodRequest(BaseModel):
    period: str  # '1d', '1w', '1m', '3m', '6m', '1y', 'custom'
    custom_start: Optional[str] = None  # ISO format datetime
    custom_end: Optional[str] = None    # ISO format datetime

class PnLPeriodResponse(BaseModel):
    period: str
    start_date: str
    end_date: str
    start_balance: float
    end_balance: float
    pnl_absolute: float
    pnl_percentage: float
    max_balance: float
    min_balance: float
    total_pnl_from_start: float
    total_pnl_percentage: float
    records_count: int
    chart_data: Dict[str, List]

class BalanceInfoResponse(BaseModel):
    current_balance: float
    current_equity: float
    available: float
    positions_value: float
    initial_balance: float
    total_pnl_absolute: float
    total_pnl_percentage: float
    last_updated: str

class PnLSummaryResponse(BaseModel):
    day: Dict[str, float]
    week: Dict[str, float] 
    month: Dict[str, float]
    three_months: Dict[str, float]
    six_months: Dict[str, float]
    year: Dict[str, float]

class LogEntry(BaseModel):
    id: str
    time: str
    message: str
    type: str

class AppStateResponse(BaseModel):
    portfolio_metrics: PortfolioMetrics
    open_positions: List[OpenPosition]
    chart_data: ChartData
    logs: List[LogEntry]

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ---
app = FastAPI(title="Trading Bot API", description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –õ–æ–≥–∏–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---
def trading_logic_thread(api: CapitalComAPI, bot: TradingBot):  # ‚úÖ worker -> bot
    logging.info("üöÄ Background trading logic started.")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò 'log_message' ---
    # –ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    original_log_message = bot.log_message
    
    def enhanced_log_message(message: str, level: str = "info"):
        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        original_log_message(message, level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        with state_lock:
            log_entry = {
                "id": f"log_{time.time()}", 
                "time": datetime.now().strftime("%H:%M:%S"), 
                "message": message, 
                "type": level
            }
            app_state["logs"].insert(0, log_entry)
            app_state["logs"] = app_state["logs"][:100]  # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
    
    # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
    bot.log_message = enhanced_log_message
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∫–µ–π–ª–µ—Ä–∞
    if not bot.fit_scaler_on_startup():
        logging.error("Failed to initialize bot scaler")
        return

    while bot.is_running:
        try:
            logging.info("Starting new trading cycle...")
            bot.run_trading_cycle()
            
            logging.info("Updating global state...")
            details = api.get_account_details()
            positions = api.get_open_positions()
            market_data = api.get_historical_prices(TRADING_EPIC, RESOLUTION, max_points=100)
            
            with state_lock:
                # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï –ò–ó BALANCE TRACKER
                if hasattr(bot, 'balance_tracker'):  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: bot –≤–º–µ—Å—Ç–æ trading_worker
                    current_balance_info = bot.balance_tracker.get_current_balance_info()
                    
                    if 'error' not in current_balance_info:
                        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ —Ç—Ä–µ–∫–µ—Ä–∞
                        app_state["portfolio_metrics"]["equity"] = current_balance_info['current_balance']
                        app_state["portfolio_metrics"]["cash"] = current_balance_info['available']
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º P&L –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        app_state["portfolio_metrics"]["total_pnl"] = current_balance_info['total_pnl_absolute']
                        app_state["portfolio_metrics"]["total_pnl_pct"] = current_balance_info['total_pnl_percentage']
                        app_state["portfolio_metrics"]["initial_balance"] = current_balance_info['initial_balance']
                else:
                    # Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –µ—Å–ª–∏ —Ç—Ä–µ–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                    if details and 'accounts' in details:
                        account_info = details['accounts'][0]
                        balance_info = account_info.get('balance', {})
                        app_state["portfolio_metrics"]["equity"] = balance_info.get('balance', 0.0)
                        app_state["portfolio_metrics"]["cash"] = balance_info.get('available', 0.0)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞
                if market_data and 'prices' in market_data:
                    prices = market_data['prices']
                    app_state["chart_data"]["labels"] = [p['snapshotTime'] for p in prices]
                    app_state["chart_data"]["prices"] = [float(p['closePrice']['bid']) for p in prices]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                formatted_positions = []
                if positions:
                    for pos in positions:
                        position_info = pos.get('position', {})
                        market_info = pos.get('market', {})
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                        current_price_data = api.get_historical_prices(
                            market_info.get('epic'), "MINUTE", max_points=1
                        )
                        current_price = (
                            float(current_price_data['prices'][0]['closePrice']['bid']) 
                            if current_price_data and current_price_data.get('prices') 
                            else position_info.get('level', 0.0)
                        )
                        
                        formatted_positions.append({
                            "ticker": market_info.get('instrumentName', 'N/A'),
                            "size": position_info.get('size', 0),
                            "entry_price": position_info.get('level', 0.0),
                            "current_price": current_price,
                            "pnl": position_info.get('pnl', 0.0)
                        })
                
                app_state["open_positions"] = formatted_positions

            # –°–ø–∏–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            sleep_duration = UPDATE_INTERVAL_SECONDS
            logging.info(f"State updated. Sleeping for {sleep_duration} seconds.")
            time.sleep(sleep_duration)

        except Exception as e:
            logging.error(f"Error in trading_logic_thread: {e}", exc_info=True)
            time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---
@app.get("/api/state", response_model=AppStateResponse)
def get_current_state():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    with state_lock:
        return app_state

@app.get("/api/health")
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.get("/api/balance/current", response_model=BalanceInfoResponse)
def get_current_balance():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ"""
    global trading_bot  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú global
    if trading_bot and hasattr(trading_bot, 'balance_tracker'):
        balance_info = trading_bot.balance_tracker.get_current_balance_info()
        if 'error' not in balance_info:
            return balance_info
    
    return {
        'current_balance': 0,
        'current_equity': 0,
        'available': 0,  
        'positions_value': 0,
        'initial_balance': 0,
        'total_pnl_absolute': 0,
        'total_pnl_percentage': 0,
        'last_updated': datetime.now().isoformat()
    }

@app.post("/api/pnl/period", response_model=PnLPeriodResponse)
def get_pnl_for_period(request: PnLPeriodRequest):
    """–ü–æ–ª—É—á–∏—Ç—å P&L –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    global trading_bot  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú global
    
    custom_start = None
    custom_end = None
    
    if request.period == 'custom':
        if request.custom_start:
            custom_start = datetime.fromisoformat(request.custom_start)
        if request.custom_end:
            custom_end = datetime.fromisoformat(request.custom_end)
    
    if trading_bot and hasattr(trading_bot, 'balance_tracker'):
        pnl_data = trading_bot.balance_tracker.get_balance_for_period(
            request.period, 
            custom_start, 
            custom_end
        )
        
        if 'error' not in pnl_data:
            return pnl_data
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    return {
        'period': request.period,
        'start_date': datetime.now().isoformat(),
        'end_date': datetime.now().isoformat(),
        'start_balance': 0,
        'end_balance': 0,
        'pnl_absolute': 0,
        'pnl_percentage': 0,
        'max_balance': 0,
        'min_balance': 0,
        'total_pnl_from_start': 0,
        'total_pnl_percentage': 0,
        'records_count': 0,
        'chart_data': {'timestamps': [], 'balances': [], 'pnl_absolute': [], 'pnl_percentage': []}
    }

@app.get("/api/pnl/summary", response_model=PnLSummaryResponse)
def get_pnl_summary():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É P&L –∑–∞ –≤—Å–µ –ø–µ—Ä–∏–æ–¥—ã"""
    global trading_bot  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú global
    
    periods = ['1d', '1w', '1m', '3m', '6m', '1y']
    period_names = ['day', 'week', 'month', 'three_months', 'six_months', 'year']
    
    summary = {}
    
    if trading_bot and hasattr(trading_bot, 'balance_tracker'):
        for period, name in zip(periods, period_names):
            pnl_data = trading_bot.balance_tracker.get_balance_for_period(period)
            
            if 'error' not in pnl_data:
                summary[name] = {
                    'pnl_absolute': pnl_data['pnl_absolute'],
                    'pnl_percentage': pnl_data['pnl_percentage'],
                    'start_balance': pnl_data['start_balance'],
                    'end_balance': pnl_data['end_balance']
                }
            else:
                summary[name] = {
                    'pnl_absolute': 0,
                    'pnl_percentage': 0,
                    'start_balance': 0,
                    'end_balance': 0
                }
    else:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω—É–ª—è–º–∏ –µ—Å–ª–∏ —Ç—Ä–µ–∫–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        for name in period_names:
            summary[name] = {
                'pnl_absolute': 0,
                'pnl_percentage': 0,
                'start_balance': 0,
                'end_balance': 0
            }
    
    return summary

@app.get("/api/balance/history/{period}")
def get_balance_history(period: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –±–∞–ª–∞–Ω—Å–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    global trading_bot  # ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú global
    
    if trading_bot and hasattr(trading_bot, 'balance_tracker'):
        pnl_data = trading_bot.balance_tracker.get_balance_for_period(period)
        
        if 'error' not in pnl_data:
            return {
                'success': True,
                'data': pnl_data['chart_data']
            }
    
    return {
        'success': False,
        'error': 'No balance history available'
    }

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env = ["CAPITAL_API_KEY", "CAPITAL_IDENTIFIER", "CAPITAL_PASSWORD"]
    missing_vars = [var for var in required_env if not os.getenv(var)]
    
    if missing_vars:
        logging.error(f"Missing required environment variables: {missing_vars}")
        logging.error(f"Please set them in {config_path}")
        exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç
    api_client = CapitalComAPI(
        api_key=os.getenv("CAPITAL_API_KEY"), 
        identifier=os.getenv("CAPITAL_IDENTIFIER"), 
        password=os.getenv("CAPITAL_PASSWORD")
    )
    
    if not api_client.login_and_get_tokens():
        logging.error("Could not log in to Capital.com API. Exiting.")
        exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ—Å—Ç–Ω–æ–π API –∫–ª–∏–µ–Ω—Ç
    news_api_client = RealNewsAPIClient(
        news_api_key=os.getenv("NEWS_API_KEY"),
        marketaux_api_key=os.getenv("MARKETAUX_API_TOKEN")
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RL –∞–≥–µ–Ω—Ç–∞
    state_dim = LOOKBACK_WINDOW * len(FEATURE_COLUMNS) + 4
    rl_agent = PPOAgent(state_dim, action_dim=3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
    if not ABSOLUTE_MODEL_PATH or not ABSOLUTE_MODEL_PATH.exists():
        logging.error(f"Could not find any model file with pattern '{MODEL_NAME_PATTERN}' in directory: {MODELS_DIR}")
        logging.info("Available files in models directory:")
        for f in MODELS_DIR.iterdir():
            logging.info(f"  - {f.name}")
        exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    rl_agent.load_model(str(ABSOLUTE_MODEL_PATH))
    
    # ‚úÖ –°–û–ó–î–ê–ï–ú –ì–õ–û–ë–ê–õ–¨–ù–£–Æ –ü–ï–†–ï–ú–ï–ù–ù–£–Æ trading_bot
    trading_bot = TradingBot(api_client, news_api_client, rl_agent)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
    background_thread = threading.Thread(
        target=trading_logic_thread, 
        args=(api_client, trading_bot), 
        daemon=True
    )
    background_thread.start()

    logging.info("Starting FastAPI server at http://localhost:8080")
    uvicorn.run(app, host="0.0.0.0", port=8080)