import os
import sys
import time
import threading
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime
from pathlib import Path

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
from dotenv import load_dotenv

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π ---
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±—ç–∫–µ–Ω–¥–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å.
# –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–∞–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, core, ml) –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
# SWF4/python-backend/core/main_api.py -> SWF4/python-backend
BACKEND_ROOT = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(BACKEND_ROOT))

# --- –ò–º–ø–æ—Ä—Ç –≤–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏ ---
# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç—ã —Å—Ç–∞–ª–∏ –±–æ–ª–µ–µ —è–≤–Ω—ã–º–∏ –∏ –Ω–∞–¥–µ–∂–Ω—ã–º–∏
from core.capital_request import CapitalComAPI
from core.live_rl_trading import PPOAgent, TradingWorker, NewsAPIClient, LOOKBACK_WINDOW, FEATURE_COLUMNS, TRADING_EPIC, RESOLUTION, TRADE_SIZE

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏ config ---
config_path = BACKEND_ROOT / 'config' / '.env'
if config_path.exists():
    logging.info(f"Loading .env file from: {config_path}")
    load_dotenv(dotenv_path=config_path)
else:
    logging.warning(f".env file not found at {config_path}. Falling back to default search.")
    load_dotenv()

# --- –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏ ---
# –ò—â–µ–º –º–æ–¥–µ–ª—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç (—Ç.–µ. –≤ –ø–∞–ø–∫–µ 'core')
MODELS_DIR = Path(__file__).resolve().parent
MODEL_NAME_PATTERN = "rl_gold_trader_model"
ABSOLUTE_MODEL_PATH = None

if MODELS_DIR.exists():
    for f in MODELS_DIR.iterdir():
        # –ò—â–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—à–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ .pth
        if f.name.startswith(MODEL_NAME_PATTERN) and f.name.endswith(".pth"):
            ABSOLUTE_MODEL_PATH = f
            logging.info(f"Found model file: {f.name}")
            break # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª

# --- –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
app_state: Dict[str, Any] = {
    "portfolio_metrics": { "equity": 10000.0, "cash": 10000.0, "total_trades": 0 },
    "open_positions": [],
    "chart_data": { "labels": [], "prices": [] },
    "logs": [],
}
state_lock = threading.Lock()

# --- –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FastAPI (Pydantic) ---
class PortfolioMetrics(BaseModel):
    equity: float
    cash: float
    total_trades: int

class OpenPosition(BaseModel):
    ticker: str
    size: float
    entry_price: float
    current_price: float
    pnl: float

class ChartData(BaseModel):
    labels: List[str]
    prices: List[float]

class LogEntry(BaseModel):
    id: str
    time: str
    message: str
    type: str

class AppStateResponse(BaseModel):
    portfolio_metrics: PortfolioMetrics
    open_positions: List[OpenPosition]
    chart_data: ChartData
    logs: List[LogEntry]

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FastAPI ---
app = FastAPI(title="Trading Bot API", description="API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- –õ–æ–≥–∏–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ---
def trading_logic_thread(api: CapitalComAPI, worker: TradingWorker):
    logging.info("üöÄ Background trading logic started.")
    
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò 'emit' ---
    # –ö–ª–∞—Å—Å-–∑–∞–≥–ª—É—à–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ PyQt-—Å–∏–≥–Ω–∞–ª–∞
    class DummySignalEmitter:
        def __init__(self, callback_func):
            self.callback = callback_func
        
        def emit(self, message, style):
            # –í–º–µ—Å—Ç–æ "–∏–∑–ª—É—á–µ–Ω–∏—è" —Å–∏–≥–Ω–∞–ª–∞, –º—ã –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é
            self.callback(message, style)

    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞—à–µ–π –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
    def log_to_state(message, style):
        with state_lock:
            log_entry = { "id": f"log_{time.time()}", "time": datetime.now().strftime("%H:%M:%S"), "message": message, "type": style }
            app_state["logs"].insert(0, log_entry)
            app_state["logs"] = app_state["logs"][:100]

    # –ó–∞–º–µ–Ω—è–µ–º PyQt-—Å–∏–≥–Ω–∞–ª –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ worker –Ω–∞ –Ω–∞—à—É –∑–∞–≥–ª—É—à–∫—É
    worker.log_message = DummySignalEmitter(log_to_state)
    
    worker.fit_scaler_on_startup()

    while True:
        try:
            logging.info("Starting new trading cycle...")
            worker.run_trading_cycle()
            logging.info("Updating global state...")
            details = api.get_account_details()
            positions = api.get_open_positions()
            market_data = api.get_historical_prices(TRADING_EPIC, RESOLUTION, max_points=100)
            
            with state_lock:
                if details and 'accounts' in details:
                    account_balance = details['accounts'][0].get('balance', {})
                    app_state["portfolio_metrics"]["equity"] = account_balance.get('deposit', 0.0) + account_balance.get('pnl', 0.0)
                    app_state["portfolio_metrics"]["cash"] = account_balance.get('available', 0.0)
                
                if market_data and 'prices' in market_data:
                    prices = market_data['prices']
                    app_state["chart_data"]["labels"] = [p['snapshotTime'] for p in prices]
                    app_state["chart_data"]["prices"] = [float(p['closePrice']['bid']) for p in prices]
                
                formatted_positions = []
                if positions:
                    for pos in positions:
                        position_info = pos.get('position', {})
                        market_info = pos.get('market', {})
                        current_price_data = api.get_historical_prices(market_info.get('epic'), "MINUTE", max_points=1)
                        current_price = float(current_price_data['prices'][0]['closePrice']['bid']) if current_price_data and current_price_data.get('prices') else position_info.get('level', 0.0)
                        
                        formatted_positions.append({
                            "ticker": market_info.get('instrumentName', 'N/A'),
                            "size": position_info.get('size', 0),
                            "entry_price": position_info.get('level', 0.0),
                            "current_price": current_price,
                            "pnl": position_info.get('pnl', 0.0)
                        })
                app_state["open_positions"] = formatted_positions

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –∏–∑ –≤–æ—Ä–∫–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ - –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            sleep_duration = getattr(worker, 'UPDATE_INTERVAL_SECONDS', 3600)
            logging.info(f"State updated. Sleeping for {sleep_duration} seconds.")
            time.sleep(sleep_duration)

        except Exception as e:
            logging.error(f"Error in trading_logic_thread: {e}", exc_info=True)
            time.sleep(60)

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---
@app.get("/api/state", response_model=AppStateResponse)
def get_current_state():
    with state_lock:
        return app_state

# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    required_env = ["CAPITAL_API_KEY", "CAPITAL_IDENTIFIER", "CAPITAL_PASSWORD"]
    if any(not os.getenv(key) for key in required_env):
        logging.error(f"Please set required environment variables in {config_path}")
        exit(1)

    api_client = CapitalComAPI(os.getenv("CAPITAL_API_KEY"), os.getenv("CAPITAL_IDENTIFIER"), os.getenv("CAPITAL_PASSWORD"))
    if not api_client.login_and_get_tokens():
        logging.error("Could not log in to Capital.com API. Exiting.")
        exit(1)

    news_api_client = NewsAPIClient(api_key=os.getenv("NEWS_API_KEY", ""))
    
    state_dim = LOOKBACK_WINDOW * len(FEATURE_COLUMNS) + 4
    rl_agent = PPOAgent(state_dim, action_dim=3)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
    if not ABSOLUTE_MODEL_PATH or not ABSOLUTE_MODEL_PATH.exists():
        logging.error(f"Could not find any model file with pattern '{MODEL_NAME_PATTERN}' in directory: {MODELS_DIR}")
        exit(1)
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    rl_agent.load_model(ABSOLUTE_MODEL_PATH)
    
    trading_worker = TradingWorker(api_client, news_api_client, rl_agent)
    
    background_thread = threading.Thread(target=trading_logic_thread, args=(api_client, trading_worker), daemon=True)
    background_thread.start()

    logging.info("Starting FastAPI server at http://localhost:8000")
    uvicorn.run(app, host="0.0.0.0", port=8080)
