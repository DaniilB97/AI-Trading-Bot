# whale_tracker.py
# –ú–æ–¥—É–ª—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä—É–ø–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–∏—Ç–æ–≤) –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞

import os
import time
import json
import logging
import asyncio
import aiohttp
from typing import Dict, List, Optional, Tuple
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

# –£—Å—Ç–∞–Ω–æ–≤–∏ —ç—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install aiohttp web3 python-decouple

class WhaleActionType(Enum):
    BUY = "buy"
    SELL = "sell"
    TRANSFER = "transfer"
    UNKNOWN = "unknown"

@dataclass
class WhaleTransaction:
    hash: str
    timestamp: datetime
    from_address: str
    to_address: str
    value_usd: float
    value_eth: float
    action_type: WhaleActionType
    token_symbol: str
    gas_fee: float
    confidence_score: float  # 0-1, –Ω–∞—Å–∫–æ–ª—å–∫–æ —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —ç—Ç–æ —Ç–æ—Ä–≥–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è

class WhaleTracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    """
    
    def __init__(self, whale_address: str, config: Dict = None):
        self.whale_address = whale_address.lower()
        self.config = config or {}
        
        # API –∫–ª—é—á–∏ (–Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)
        self.etherscan_api_key = os.getenv('ETHERSCAN_API_KEY')
        self.alchemy_api_key = os.getenv('ALCHEMY_API_KEY')
        self.moralis_api_key = os.getenv('MORALIS_API_KEY')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        self.min_transaction_usd = config.get('min_transaction_usd', 100000)  # –ú–∏–Ω–∏–º—É–º $100k
        self.max_age_hours = config.get('max_age_hours', 24)  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ 24 —á–∞—Å–∞
        self.check_interval_minutes = config.get('check_interval_minutes', 15)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        
        # –ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        self.transaction_cache = {}
        self.last_check_time = None
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.trading_pairs = {
            'WETH': '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
            'USDC': '0xa0b86a33e6441e7c4c0aaa5c5f2c5c6e5df6c5c1',
            'USDT': '0xdac17f958d2ee523a2206206994597c13d831ec7',
            'WBTC': '0x2260fac5e5542a773aa44fbcfedf7c193bc2c599',
        }
        
        logging.info(f"üêã Whale Tracker initialized for address: {whale_address}")
    
    async def get_whale_transactions(self, limit: int = 100) -> List[WhaleTransaction]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        transactions = []
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ API –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if self.etherscan_api_key:
                etherscan_txs = await self._get_etherscan_transactions(limit)
                transactions.extend(etherscan_txs)
            
            if self.alchemy_api_key:
                alchemy_txs = await self._get_alchemy_transactions(limit)
                transactions.extend(alchemy_txs)
            
            if self.moralis_api_key:
                moralis_txs = await self._get_moralis_transactions(limit)
                transactions.extend(moralis_txs)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            unique_transactions = self._deduplicate_transactions(transactions)
            unique_transactions.sort(key=lambda x: x.timestamp, reverse=True)
            
            logging.info(f"üêã Retrieved {len(unique_transactions)} unique whale transactions")
            return unique_transactions[:limit]
            
        except Exception as e:
            logging.error(f"Error fetching whale transactions: {e}")
            return []
    
    async def _get_etherscan_transactions(self, limit: int) -> List[WhaleTransaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Etherscan API"""
        url = "https://api.etherscan.io/api"
        params = {
            'module': 'account',
            'action': 'txlist',
            'address': self.whale_address,
            'startblock': 0,
            'endblock': 99999999,
            'page': 1,
            'offset': limit,
            'sort': 'desc',
            'apikey': self.etherscan_api_key
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    data = await response.json()
                    
                    if data['status'] == '1':
                        transactions = []
                        for tx in data['result']:
                            whale_tx = await self._parse_etherscan_transaction(tx)
                            if whale_tx:
                                transactions.append(whale_tx)
                        return transactions
                    else:
                        logging.warning(f"Etherscan API error: {data.get('message', 'Unknown error')}")
                        return []
        except Exception as e:
            logging.error(f"Etherscan API error: {e}")
            return []
    
    async def _get_alchemy_transactions(self, limit: int) -> List[WhaleTransaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Alchemy API"""
        # Alchemy –∏–º–µ–µ—Ç –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DeFi —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        url = f"https://eth-mainnet.alchemyapi.io/v2/{self.alchemy_api_key}"
        
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "alchemy_getAssetTransfers",
            "params": [{
                "fromBlock": "0x0",
                "toBlock": "latest",
                "fromAddress": self.whale_address,
                "category": ["external", "erc20", "erc721", "erc1155"],
                "maxCount": hex(limit),
                "order": "desc"
            }]
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload) as response:
                    data = await response.json()
                    
                    if 'result' in data:
                        transactions = []
                        for transfer in data['result']['transfers']:
                            whale_tx = await self._parse_alchemy_transaction(transfer)
                            if whale_tx:
                                transactions.append(whale_tx)
                        return transactions
                    else:
                        logging.warning(f"Alchemy API error: {data.get('error', 'Unknown error')}")
                        return []
        except Exception as e:
            logging.error(f"Alchemy API error: {e}")
            return []
    
    async def _get_moralis_transactions(self, limit: int) -> List[WhaleTransaction]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ Moralis API"""
        url = f"https://deep-index.moralis.io/api/v2/{self.whale_address}"
        headers = {
            'X-API-Key': self.moralis_api_key,
            'accept': 'application/json'
        }
        params = {
            'chain': 'eth',
            'limit': limit,
            'order': 'desc'
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, params=params) as response:
                    data = await response.json()
                    
                    if 'result' in data:
                        transactions = []
                        for tx in data['result']:
                            whale_tx = await self._parse_moralis_transaction(tx)
                            if whale_tx:
                                transactions.append(whale_tx)
                        return transactions
                    else:
                        logging.warning(f"Moralis API error: {data}")
                        return []
        except Exception as e:
            logging.error(f"Moralis API error: {e}")
            return []
    
    async def _parse_etherscan_transaction(self, tx_data: dict) -> Optional[WhaleTransaction]:
        """–ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Etherscan"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            eth_price = await self._get_eth_price()
            
            value_eth = float(tx_data['value']) / 1e18
            value_usd = value_eth * eth_price
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –º–µ–ª–∫–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            if value_usd < self.min_transaction_usd:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
            action_type = WhaleActionType.BUY if tx_data['to'].lower() == self.whale_address else WhaleActionType.SELL
            
            return WhaleTransaction(
                hash=tx_data['hash'],
                timestamp=datetime.fromtimestamp(int(tx_data['timeStamp'])),
                from_address=tx_data['from'].lower(),
                to_address=tx_data['to'].lower(),
                value_usd=value_usd,
                value_eth=value_eth,
                action_type=action_type,
                token_symbol='ETH',
                gas_fee=float(tx_data['gasUsed']) * float(tx_data['gasPrice']) / 1e18 * eth_price,
                confidence_score=0.8  # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è ETH —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            )
        except Exception as e:
            logging.error(f"Error parsing Etherscan transaction: {e}")
            return None
    
    async def _parse_alchemy_transaction(self, transfer_data: dict) -> Optional[WhaleTransaction]:
        """–ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Alchemy"""
        try:
            value_usd = float(transfer_data.get('value', 0))
            
            if value_usd < self.min_transaction_usd:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            action_type = WhaleActionType.BUY if transfer_data['to'].lower() == self.whale_address else WhaleActionType.SELL
            
            return WhaleTransaction(
                hash=transfer_data['uniqueId'],
                timestamp=datetime.fromisoformat(transfer_data['metadata']['blockTimestamp'].replace('Z', '+00:00')),
                from_address=transfer_data['from'].lower(),
                to_address=transfer_data['to'].lower(),
                value_usd=value_usd,
                value_eth=float(transfer_data.get('value', 0)),
                action_type=action_type,
                token_symbol=transfer_data.get('asset', 'ETH'),
                gas_fee=0,  # Alchemy –Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç gas fee
                confidence_score=0.9  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è Alchemy –¥–∞–Ω–Ω—ã—Ö
            )
        except Exception as e:
            logging.error(f"Error parsing Alchemy transaction: {e}")
            return None
    
    async def _parse_moralis_transaction(self, tx_data: dict) -> Optional[WhaleTransaction]:
        """–ü–∞—Ä—Å–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ Moralis"""
        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥—Ä—É–≥–∏–º –º–µ—Ç–æ–¥–∞–º –ø–∞—Ä—Å–∏–Ω–≥–∞
        try:
            eth_price = await self._get_eth_price()
            value_eth = float(tx_data['value']) / 1e18
            value_usd = value_eth * eth_price
            
            if value_usd < self.min_transaction_usd:
                return None
            
            action_type = WhaleActionType.BUY if tx_data['to_address'].lower() == self.whale_address else WhaleActionType.SELL
            
            return WhaleTransaction(
                hash=tx_data['hash'],
                timestamp=datetime.fromisoformat(tx_data['block_timestamp'].replace('Z', '+00:00')),
                from_address=tx_data['from_address'].lower(),
                to_address=tx_data['to_address'].lower(),
                value_usd=value_usd,
                value_eth=value_eth,
                action_type=action_type,
                token_symbol='ETH',
                gas_fee=float(tx_data.get('gas_price', 0)) * float(tx_data.get('gas_used', 0)) / 1e18 * eth_price,
                confidence_score=0.85
            )
        except Exception as e:
            logging.error(f"Error parsing Moralis transaction: {e}")
            return None
    
    def _deduplicate_transactions(self, transactions: List[WhaleTransaction]) -> List[WhaleTransaction]:
        """–£–±–∏—Ä–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        seen_hashes = set()
        unique_transactions = []
        
        for tx in transactions:
            if tx.hash not in seen_hashes:
                seen_hashes.add(tx.hash)
                unique_transactions.append(tx)
        
        return unique_transactions
    
    async def _get_eth_price(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH –≤ USD"""
        try:
            url = "https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd"
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    data = await response.json()
                    return float(data['ethereum']['usd'])
        except Exception as e:
            logging.error(f"Error fetching ETH price: {e}")
            return 2000.0  # Fallback —Ü–µ–Ω–∞
    
    def analyze_whale_sentiment(self, transactions: List[WhaleTransaction]) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∏—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        """
        if not transactions:
            return {
                'signal': 'NEUTRAL',
                'confidence': 0.0,
                'reason': 'No recent whale activity',
                'transactions_analyzed': 0
            }
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        recent_transactions = [
            tx for tx in transactions
            if tx.timestamp > datetime.now() - timedelta(hours=self.max_age_hours)
        ]
        
        if not recent_transactions:
            return {
                'signal': 'NEUTRAL',
                'confidence': 0.0,
                'reason': 'No recent whale activity in specified timeframe',
                'transactions_analyzed': 0
            }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        total_buy_volume = sum(tx.value_usd for tx in recent_transactions if tx.action_type == WhaleActionType.BUY)
        total_sell_volume = sum(tx.value_usd for tx in recent_transactions if tx.action_type == WhaleActionType.SELL)
        
        buy_count = len([tx for tx in recent_transactions if tx.action_type == WhaleActionType.BUY])
        sell_count = len([tx for tx in recent_transactions if tx.action_type == WhaleActionType.SELL])
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
        net_volume = total_buy_volume - total_sell_volume
        volume_ratio = total_buy_volume / (total_sell_volume + 1)  # +1 —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–≥–Ω–∞–ª
        signal = 'NEUTRAL'
        confidence = 0.0
        reason = ''
        
        if net_volume > 500000:  # –ö–∏—Ç –Ω–∞–∫—É–ø–∏–ª –Ω–∞ $500k+ –±–æ–ª—å—à–µ —á–µ–º –ø—Ä–æ–¥–∞–ª
            signal = 'BULLISH'
            confidence = min(0.9, net_volume / 1000000)  # –ú–∞–∫—Å–∏–º—É–º 90% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            reason = f'Whale accumulated ${net_volume:,.0f} net (Buy: ${total_buy_volume:,.0f}, Sell: ${total_sell_volume:,.0f})'
        elif net_volume < -500000:  # –ö–∏—Ç –ø—Ä–æ–¥–∞–ª –Ω–∞ $500k+ –±–æ–ª—å—à–µ —á–µ–º –∫—É–ø–∏–ª
            signal = 'BEARISH'
            confidence = min(0.9, abs(net_volume) / 1000000)
            reason = f'Whale distributed ${abs(net_volume):,.0f} net (Buy: ${total_buy_volume:,.0f}, Sell: ${total_sell_volume:,.0f})'
        else:
            if buy_count > sell_count * 2:  # –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫
                signal = 'SLIGHTLY_BULLISH'
                confidence = 0.3
                reason = f'Whale making frequent small buys ({buy_count} buys vs {sell_count} sells)'
            elif sell_count > buy_count * 2:  # –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø—Ä–æ–¥–∞–∂
                signal = 'SLIGHTLY_BEARISH'
                confidence = 0.3
                reason = f'Whale making frequent small sells ({sell_count} sells vs {buy_count} buys)'
            else:
                reason = f'Balanced whale activity (Buy: ${total_buy_volume:,.0f}, Sell: ${total_sell_volume:,.0f})'
        
        return {
            'signal': signal,
            'confidence': confidence,
            'reason': reason,
            'transactions_analyzed': len(recent_transactions),
            'total_buy_volume': total_buy_volume,
            'total_sell_volume': total_sell_volume,
            'net_volume': net_volume,
            'buy_count': buy_count,
            'sell_count': sell_count,
            'whale_address': self.whale_address,
            'analysis_timestamp': datetime.now().isoformat()
        }
    
    async def get_whale_signal(self) -> Dict:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç –∫–∏—Ç–∞
        """
        try:
            logging.info(f"üêã Analyzing whale activity for {self.whale_address}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transactions = await self.get_whale_transactions(limit=50)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª
            analysis = self.analyze_whale_sentiment(transactions)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logging.info(f"üêã Whale signal: {analysis['signal']} (confidence: {analysis['confidence']:.2f})")
            logging.info(f"üêã Reason: {analysis['reason']}")
            
            return analysis
            
        except Exception as e:
            logging.error(f"Error getting whale signal: {e}")
            return {
                'signal': 'ERROR',
                'confidence': 0.0,
                'reason': f'Error analyzing whale: {str(e)}',
                'error': str(e)
            }

