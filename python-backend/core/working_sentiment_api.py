# working_sentiment_api.py - –†–ê–ë–û–ß–ò–ô sentiment API

import os
import requests
import logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
import numpy as np

load_dotenv()
logger = logging.getLogger(__name__)

def get_market_sentiment(symbol: str = "gold") -> float:
    """
    –†–ê–ë–û–ß–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è sentiment
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ health check
    """
    
    # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ - MarketAux (–†–ê–ë–û–¢–ê–ï–¢!)
    try:
        api_key = os.getenv("MARKETAUX_API_TOKEN")
        if api_key:
            logger.info("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ sentiment –æ—Ç MarketAux...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ê–ë–û–ß–ò–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ health check
            test_url = "https://api.marketaux.com/v1/news/all"
            to_date = datetime.now(timezone.utc)
            from_date = to_date - timedelta(hours=12)  # –†–∞–±–æ—á–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞
            if symbol.lower() == "gold":
                symbols = "GOLD,DXY,VIX,SPY"  # –ó–æ–ª–æ—Ç–æ + –∫–æ—Ä—Ä–µ–ª–∏—Ä—É—é—â–∏–µ –∞–∫—Ç–∏–≤—ã
            else:
                symbols = "SPY"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            params = {
                'api_token': api_key,
                'symbols': symbols,
                'language': 'en',
                'published_after': from_date.strftime('%Y-%m-%dT%H:%M:%S'),
                'published_before': to_date.strftime('%Y-%m-%dT%H:%M:%S'),
                'limit': 5  # –†–∞–±–æ—á–∏–π –ª–∏–º–∏—Ç
            }
            
            response = requests.get(test_url, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                articles = data.get('data', [])
                
                if articles:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º sentiment scores –∏–∑ entities (–∫–∞–∫ –≤ health check)
                    all_entity_sentiment_scores = []
                    for article in articles:
                        entities = article.get('entities', [])
                        for entity in entities:
                            score = entity.get('sentiment_score')
                            if score is not None:
                                all_entity_sentiment_scores.append(score)
                    
                    if all_entity_sentiment_scores:
                        avg_sentiment = np.mean(all_entity_sentiment_scores)
                        logger.info(f"‚úÖ MarketAux sentiment: {avg_sentiment:.3f} –∏–∑ {len(all_entity_sentiment_scores)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
                        return float(avg_sentiment)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ -1 –¥–æ 1
                
                logger.warning("‚ö†Ô∏è MarketAux: —Å—Ç–∞—Ç—å–∏ –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–µ—Ç sentiment scores")
            else:
                logger.warning(f"‚ö†Ô∏è MarketAux API –æ—à–∏–±–∫–∞: {response.status_code}")
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è MarketAux –æ—à–∏–±–∫–∞: {e}")
    
    # 2. Fallback - Fear & Greed Index (–°–¢–ê–ë–ò–õ–¨–ù–û –†–ê–ë–û–¢–ê–ï–¢!)
    try:
        logger.info("üìà Fallback: Fear & Greed Index...")
        response = requests.get("https://api.alternative.me/fng/?limit=1", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            if data and data.get('data'):
                value = float(data['data'][0]['value'])
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 0-100 –≤ -1 –¥–æ 1 (–∫–∞–∫ –≤ health check: 71 = –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π)
                if value <= 25:
                    normalized = -1 + (value / 25) * 0.5  # 0-25 = -1 –¥–æ -0.5
                elif value <= 75:
                    normalized = -0.5 + ((value - 25) / 50) * 1  # 25-75 = -0.5 –¥–æ 0.5
                else:
                    normalized = 0.5 + ((value - 75) / 25) * 0.5  # 75-100 = 0.5 –¥–æ 1
                
                logger.info(f"‚úÖ Fear & Greed: {value}/100 ‚Üí sentiment: {normalized:.3f}")
                return normalized
                
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Fear & Greed –æ—à–∏–±–∫–∞: {e}")
    
    # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π sentiment")
    return 0.0


def get_market_sentiment_detailed(symbol: str = "gold") -> dict:
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    sentiment = get_market_sentiment(symbol)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
    source = "unknown"
    confidence = 0.5
    
    if sentiment != 0.0:
        if -1 <= sentiment <= 1:
            source = "marketaux" if abs(sentiment) > 0.1 else "fear_greed"
            confidence = 0.8 if source == "marketaux" else 0.7
        else:
            source = "fear_greed"
            confidence = 0.7
    else:
        source = "fallback"
        confidence = 0.3
    
    return {
        'sentiment': sentiment,
        'confidence': confidence,
        'source': source,
        'timestamp': datetime.now().isoformat(),
        'status': 'success'
    }


# –û–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è live_rl_trading.py
def get_sentiment(text: str) -> float:
    """
    –û–±—Ä–∞—Ç–Ω–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Å—Ç–∞—Ä—ã—Ö –∑–∞–≥–ª—É—à–µ–∫
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç market sentiment + keyword –∞–Ω–∞–ª–∏–∑
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π market sentiment
    market_sentiment = get_market_sentiment("gold")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    text_lower = text.lower()
    keyword_adjustment = 0.0
    
    positive_words = ["surge", "bullish", "strong", "rise", "gain", "rally", "safe-haven"]
    negative_words = ["fall", "bearish", "weak", "drop", "decline", "crash", "slips"]
    
    positive_count = sum(1 for word in positive_words if word in text_lower)
    negative_count = sum(1 for word in negative_words if word in text_lower)
    
    if positive_count > negative_count:
        keyword_adjustment = 0.2
    elif negative_count > positive_count:
        keyword_adjustment = -0.2
    
    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º market sentiment —Å keyword –∞–Ω–∞–ª–∏–∑–æ–º
    final_sentiment = max(-1.0, min(1.0, market_sentiment + keyword_adjustment))
    
    logger.debug(f"üí≠ –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π sentiment: market({market_sentiment:.3f}) + keywords({keyword_adjustment:.3f}) = {final_sentiment:.3f}")
    return final_sentiment


def test_sentiment_api():
    """–¢–µ—Å—Ç API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    print("üß™ –¢–µ—Å—Ç —Ä–∞–±–æ—á–µ–≥–æ sentiment API:")
    print("-" * 50)
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    for i in range(3):
        sentiment = get_market_sentiment("gold")
        print(f"  –¢–µ—Å—Ç {i+1}: get_market_sentiment('gold') = {sentiment:.3f}")
    
    print()
    
    # –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    detailed = get_market_sentiment_detailed("gold")
    print(f"  –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    for key, value in detailed.items():
        print(f"    {key}: {value}")
    
    print()
    
    # –¢–µ—Å—Ç keyword –∞–Ω–∞–ª–∏–∑–∞
    test_texts = [
        "Gold prices surge amid economic uncertainty",
        "Gold slips slightly as dollar strengthens", 
        "Neutral market conditions today"
    ]
    
    print("  –¢–µ—Å—Ç keyword –∞–Ω–∞–ª–∏–∑–∞:")
    for text in test_texts:
        sentiment = get_sentiment(text)
        print(f"    '{text[:30]}...' ‚Üí {sentiment:.3f}")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    test_sentiment_api()