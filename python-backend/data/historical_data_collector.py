# historical_data_collector.py - –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Golden Cross

import os
import sys
import pandas as pd
import requests
import logging
from datetime import datetime, timedelta, timezone
from dotenv import load_dotenv
import time
import numpy as np
import yfinance as yf  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
import pandas_ta as ta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ core
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'core'))
from capital_request import CapitalComAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

class HistoricalTradingDataCollector:
    """
    –ú–æ—â–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è RL –º–æ–¥–µ–ª–∏
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - 5+ –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - Golden Cross MA(50) vs MA(200) –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
    - –†–µ–∞–ª—å–Ω—ã–µ sentiment –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
    - –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–ª—è train_rl_model.py
    """
    
    def __init__(self):
        self.capital_api = CapitalComAPI(
            os.getenv("CAPITAL_API_KEY"),
            os.getenv("CAPITAL_IDENTIFIER"),
            os.getenv("CAPITAL_PASSWORD")
        )
        self.marketaux_key = os.getenv("MARKETAUX_API_TOKEN")
        
        # –í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
        self.master_training_file = "master_training_dataset.csv"
        self.daily_data_file = "daily_data_with_golden_cross.csv"
        self.hourly_data_file = "hourly_data_with_sentiment.csv"
        
        logger.info("üìä –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def collect_historical_price_data(self, years: int = 5) -> dict:
        """
        –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            years: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –∏ —á–∞—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        logger.info(f"üìà –°–±–æ—Ä {years} –ª–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        end_date = datetime.now()
        start_date = end_date - timedelta(days=years * 365)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–±–æ—Ä–∞
        instruments = {
            'GOLD': 'GC=F',        # Gold Futures
            'DXY': 'DX=F',         # Dollar Index
            'VIX': '^VIX',         # Volatility Index
            'SPY': 'SPY',          # S&P 500 ETF
            'US10Y': '^TNX'        # 10-Year Treasury
        }
        
        daily_data = {}
        hourly_data = {}
        
        for instrument, yahoo_symbol in instruments.items():
            try:
                logger.info(f"  üìä –ü–æ–ª—É—á–µ–Ω–∏–µ {instrument} ({yahoo_symbol})...")
                
                # –î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–ª—è Golden Cross)
                daily_ticker = yf.Ticker(yahoo_symbol)
                daily_df = daily_ticker.history(
                    start=start_date.strftime('%Y-%m-%d'),
                    end=end_date.strftime('%Y-%m-%d'),
                    interval='1d'
                )
                
                if not daily_df.empty:
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
                    daily_df.columns = [f"{instrument}_{col}" for col in daily_df.columns]
                    daily_data[instrument] = daily_df
                    logger.info(f"    ‚úÖ –î–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ {instrument}: {len(daily_df)} –∑–∞–ø–∏—Å–µ–π")
                
                # –ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
                hourly_start = end_date - timedelta(days=365 * 2)
                hourly_df = daily_ticker.history(
                    start=hourly_start.strftime('%Y-%m-%d'),
                    end=end_date.strftime('%Y-%m-%d'),
                    interval='1h'
                )
                
                if not hourly_df.empty:
                    hourly_df.columns = [f"{instrument}_{col}" for col in hourly_df.columns]
                    hourly_data[instrument] = hourly_df
                    logger.info(f"    ‚úÖ –ß–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ {instrument}: {len(hourly_df)} –∑–∞–ø–∏—Å–µ–π")
                
                time.sleep(0.5)  # Rate limiting
                
            except Exception as e:
                logger.warning(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è {instrument}: {e}")
                continue
        
        return {
            'daily': daily_data,
            'hourly': hourly_data
        }
    
    def calculate_golden_cross_signals(self, daily_df: pd.DataFrame, 
                                     price_column: str = 'GOLD_Close') -> pd.DataFrame:
        """
        –†–∞—Å—á–µ—Ç Golden Cross —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            daily_df: DataFrame —Å –¥–Ω–µ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            price_column: –ö–æ–ª–æ–Ω–∫–∞ —Å —Ü–µ–Ω–æ–π –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ MA
            
        Returns:
            DataFrame —Å Golden Cross —Å–∏–≥–Ω–∞–ª–∞–º–∏
        """
        logger.info("üéØ –†–∞—Å—á–µ—Ç Golden Cross —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        if price_column not in daily_df.columns:
            logger.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ {price_column} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return daily_df
        
        df = daily_df.copy()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ
        df['MA_50'] = df[price_column].rolling(window=50, min_periods=1).mean()
        df['MA_200'] = df[price_column].rolling(window=200, min_periods=1).mean()
        
        # Golden Cross –ª–æ–≥–∏–∫–∞
        df['MA_50_above_200'] = (df['MA_50'] > df['MA_200']).astype(int)
        df['MA_50_above_200_prev'] = df['MA_50_above_200'].shift(1)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        df['golden_cross_bullish'] = (
            (df['MA_50_above_200'] == 1) & 
            (df['MA_50_above_200_prev'] == 0)
        ).astype(int)
        
        df['golden_cross_bearish'] = (
            (df['MA_50_above_200'] == 0) & 
            (df['MA_50_above_200_prev'] == 1)
        ).astype(int)
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞
        df['golden_cross_trend'] = np.where(
            df['MA_50'] > df['MA_200'], 1,  # Bullish trend
            np.where(df['MA_50'] < df['MA_200'], -1, 0)  # Bearish trend
        )
        
        # –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É MA)
        df['ma_spread'] = (df['MA_50'] - df['MA_200']) / df['MA_200']
        df['ma_spread_normalized'] = (df['ma_spread'] - df['ma_spread'].mean()) / (df['ma_spread'].std() + 1e-9)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        bullish_crosses = df['golden_cross_bullish'].sum()
        bearish_crosses = df['golden_cross_bearish'].sum()
        
        logger.info(f"‚úÖ Golden Cross —Ä–∞—Å—á–µ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã:")
        logger.info(f"   üìà Bullish crosses: {bullish_crosses}")
        logger.info(f"   üìâ Bearish crosses: {bearish_crosses}")
        logger.info(f"   üìä –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥: {df['golden_cross_trend'].iloc[-1]}")
        
        return df
    
    def add_technical_indicators_comprehensive(self, df: pd.DataFrame, 
                                             price_col: str = 'GOLD_Close') -> pd.DataFrame:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –¥–ª—è RL –º–æ–¥–µ–ª–∏
        """
        logger.info("üìä –†–∞—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
        
        if price_col not in df.columns:
            logger.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ {price_col} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return df
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pandas_ta –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        df.ta.rsi(close=price_col, length=14, append=True)
        df.ta.stoch(high=price_col, low=price_col, close=price_col, 
                   k=14, d=3, smooth_k=3, append=True)
        df.ta.cci(high=price_col, low=price_col, close=price_col, 
                  length=14, append=True)
        df.ta.atr(high=price_col, low=price_col, close=price_col, 
                  length=14, append=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        df['Price_Change_1'] = df[price_col].pct_change(1)
        df['Price_Change_5'] = df[price_col].pct_change(5)
        df['Price_Change_24'] = df[price_col].pct_change(24) if len(df) > 24 else 0
        
        # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        df['Volatility_24'] = df['Price_Change_1'].rolling(window=24, min_periods=1).std()
        
        # DXY –∏ VIX –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if 'DXY_Close' in df.columns:
            df['DXY_change'] = df['DXY_Close'].pct_change()
        if 'VIX_Close' in df.columns:
            df['VIX_change'] = df['VIX_Close'].pct_change()
        
        # –£–±–∏—Ä–∞–µ–º NaN
        df = df.fillna(method='ffill').fillna(method='bfill').fillna(0)
        
        logger.info("‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return df
    
    def get_historical_sentiment_proxy(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ sentiment –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        
        –ü–æ—Å–∫–æ–ª—å–∫—É —É –Ω–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö sentiment –¥–∞–Ω–Ω—ã—Ö,
        —Å–æ–∑–¥–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
        - VIX (—Å—Ç—Ä–∞—Ö/–∂–∞–¥–Ω–æ—Å—Ç—å)
        - Price momentum
        - Golden Cross —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        """
        logger.info("üì∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ sentiment –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ë–∞–∑–æ–≤—ã–π sentiment –Ω–∞ –æ—Å–Ω–æ–≤–µ VIX
        if 'VIX_Close' in df.columns:
            vix_norm = (df['VIX_Close'] - df['VIX_Close'].rolling(252, min_periods=1).mean()) / \
                      (df['VIX_Close'].rolling(252, min_periods=1).std() + 1e-9)
            vix_sentiment = -np.tanh(vix_norm * 0.5)  # VIX –≤—ã—Å–æ–∫–∏–π = –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π sentiment
        else:
            vix_sentiment = 0
        
        # Momentum sentiment
        if 'Price_Change_5' in df.columns:
            momentum_sentiment = np.tanh(df['Price_Change_5'] * 10)  # Price growth = positive
        else:
            momentum_sentiment = 0
        
        # Golden Cross sentiment
        if 'golden_cross_trend' in df.columns:
            golden_cross_sentiment = df['golden_cross_trend'] * 0.3  # –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥
        else:
            golden_cross_sentiment = 0
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π sentiment
        df['sentiment_proxy'] = (
            0.4 * vix_sentiment + 
            0.4 * momentum_sentiment + 
            0.2 * golden_cross_sentiment
        )
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
        df['sentiment_proxy'] = np.clip(df['sentiment_proxy'], -1, 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        noise = np.random.normal(0, 0.05, len(df))
        df['sentiment'] = np.clip(df['sentiment_proxy'] + noise, -1, 1)
        
        logger.info(f"‚úÖ Sentiment –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω (—Å—Ä–µ–¥–Ω–µ–µ: {df['sentiment'].mean():.3f})")
        return df
    
    def merge_daily_and_hourly_data(self, daily_data: dict, hourly_data: dict) -> pd.DataFrame:
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö (Golden Cross) –∏ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        logger.info("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω—ã—Ö –∏ —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–Ω–µ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        daily_combined = None
        for instrument, df in daily_data.items():
            if daily_combined is None:
                daily_combined = df
            else:
                daily_combined = daily_combined.join(df, how='outer')
        
        if daily_combined is None:
            logger.error("‚ùå –ù–µ—Ç –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return pd.DataFrame()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º Golden Cross –Ω–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        daily_combined = self.calculate_golden_cross_signals(daily_combined)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        hourly_combined = None
        for instrument, df in hourly_data.items():
            if hourly_combined is None:
                hourly_combined = df
            else:
                hourly_combined = hourly_combined.join(df, how='outer')
        
        if hourly_combined is None:
            logger.error("‚ùå –ù–µ—Ç —á–∞—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return pd.DataFrame()
        
        # –†–µ—Å—ç–º–ø–ª–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—ã–µ Golden Cross —Å–∏–≥–Ω–∞–ª—ã –≤ —á–∞—Å–æ–≤—ã–µ
        daily_resampled = daily_combined[['golden_cross_trend', 'ma_spread_normalized', 
                                        'golden_cross_bullish', 'golden_cross_bearish']].resample('H').ffill()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–Ω–µ–≤–Ω—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
        final_df = hourly_combined.join(daily_resampled, how='left')
        final_df = final_df.fillna(method='ffill').fillna(method='bfill').fillna(0)
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {len(final_df)} —á–∞—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        return final_df
    
    def create_master_training_dataset(self, years: int = 5) -> pd.DataFrame:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        logger.info("üöÄ –°–û–ó–î–ê–ù–ò–ï –ú–ê–°–¢–ï–† –î–ê–¢–ê–°–ï–¢–ê –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø...")
        
        try:
            # 1. –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            price_data = self.collect_historical_price_data(years)
            
            if not price_data['daily'] or not price_data['hourly']:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                return pd.DataFrame()
            
            # 2. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            combined_df = self.merge_daily_and_hourly_data(
                price_data['daily'], 
                price_data['hourly']
            )
            
            if combined_df.empty:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return pd.DataFrame()
            
            # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            enriched_df = self.add_technical_indicators_comprehensive(combined_df)
            
            # 4. –°–æ–∑–¥–∞–Ω–∏–µ sentiment –ø—Ä–æ–∫—Å–∏
            final_df = self.get_historical_sentiment_proxy(enriched_df)
            
            # 5. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
            feature_columns = [
                'GOLD_Close', 'DXY_Close', 'VIX_Close',  # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–µ–Ω—ã
                'RSI_20', 'STOCHk_14_3_3', 'CCI_14_0.015', 'ATR_14',  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                'Price_Change_1', 'Price_Change_5', 'Volatility_24',  # Momentum –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                'DXY_change', 'VIX_change',  # –ú–µ–∂—Ä—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                'golden_cross_trend', 'ma_spread_normalized',  # Golden Cross —Å–∏–≥–Ω–∞–ª—ã
                'sentiment'  # Sentiment
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            available_columns = [col for col in feature_columns if col in final_df.columns]
            training_df = final_df[available_columns].copy()
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            training_df = training_df.dropna()
            training_df = training_df[training_df.index.notna()]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            training_df.to_csv(self.master_training_file)
            
            logger.info("‚úÖ –ú–ê–°–¢–ï–† –î–ê–¢–ê–°–ï–¢ –°–û–ó–î–ê–ù!")
            logger.info(f"   üìä –ó–∞–ø–∏—Å–µ–π: {len(training_df)}")
            logger.info(f"   üìà –í—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {training_df.index.min()} ‚Üí {training_df.index.max()}")
            logger.info(f"   üéØ –§–∏—á–∏: {list(training_df.columns)}")
            logger.info(f"   üíæ –§–∞–π–ª: {self.master_training_file}")
            
            return training_df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
            return pd.DataFrame()
    
    def get_dataset_statistics(self) -> dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        try:
            if not os.path.exists(self.master_training_file):
                return {'error': '–ú–∞—Å—Ç–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            df = pd.read_csv(self.master_training_file, index_col=0, parse_dates=True)
            
            stats = {
                'total_records': len(df),
                'date_range': f"{df.index.min()} ‚Üí {df.index.max()}",
                'features': list(df.columns),
                'file_size_mb': os.path.getsize(self.master_training_file) / 1024 / 1024,
                'golden_cross_stats': {
                    'bullish_periods': (df['golden_cross_trend'] == 1).sum() if 'golden_cross_trend' in df.columns else 0,
                    'bearish_periods': (df['golden_cross_trend'] == -1).sum() if 'golden_cross_trend' in df.columns else 0,
                    'neutral_periods': (df['golden_cross_trend'] == 0).sum() if 'golden_cross_trend' in df.columns else 0
                },
                'sentiment_stats': {
                    'mean': df['sentiment'].mean() if 'sentiment' in df.columns else None,
                    'std': df['sentiment'].std() if 'sentiment' in df.columns else None,
                    'min': df['sentiment'].min() if 'sentiment' in df.columns else None,
                    'max': df['sentiment'].max() if 'sentiment' in df.columns else None
                }
            }
            
            return stats
            
        except Exception as e:
            return {'error': str(e)}


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    collector = HistoricalTradingDataCollector()
    
    print("üìä –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–ô –°–ë–û–†–©–ò–ö –î–ê–ù–ù–´–• –î–õ–Ø RL –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 60)
    print("1. üöÄ –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç (5+ –ª–µ—Ç)")
    print("2. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    print("3. üß™ –¢–µ—Å—Ç Golden Cross –ª–æ–≥–∏–∫–∏")
    print("4. üìà –ö—Ä–∞—Ç–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç (2 –≥–æ–¥–∞) –¥–ª—è —Ç–µ—Å—Ç–æ–≤")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-4): ").strip()
    
    if choice == "1":
        years = int(input("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—Ä–∞—Ç—å? (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 5): ") or "5")
        logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞ –∑–∞ {years} –ª–µ—Ç...")
        
        dataset = collector.create_master_training_dataset(years)
        
        if not dataset.empty:
            stats = collector.get_dataset_statistics()
            print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
            for key, value in stats.items():
                if isinstance(value, dict):
                    print(f"  {key}:")
                    for sub_key, sub_value in value.items():
                        print(f"    {sub_key}: {sub_value}")
                else:
                    print(f"  {key}: {value}")
            
            print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {collector.master_training_file}")
            print("üìù –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å train_rl_model.py")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞")
    
    elif choice == "2":
        stats = collector.get_dataset_statistics()
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ê–¢–ê–°–ï–¢–ê:")
        for key, value in stats.items():
            if isinstance(value, dict):
                print(f"  {key}:")
                for sub_key, sub_value in value.items():
                    print(f"    {sub_key}: {sub_value}")
            else:
                print(f"  {key}: {value}")
    
    elif choice == "3":
        logger.info("üß™ –¢–µ—Å—Ç Golden Cross –ª–æ–≥–∏–∫–∏...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = collector.collect_historical_price_data(1)  # 1 –≥–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
        if test_data['daily'].get('GOLD'):
            daily_df = test_data['daily']['GOLD']
            golden_cross_df = collector.calculate_golden_cross_signals(daily_df)
            
            print("\nüéØ GOLDEN CROSS –ê–ù–ê–õ–ò–ó:")
            print(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–Ω–µ–π:")
            print(golden_cross_df[['GOLD_Close', 'MA_50', 'MA_200', 'golden_cross_trend']].tail(10))
            
            recent_crosses = golden_cross_df[golden_cross_df['golden_cross_bullish'] == 1].tail(5)
            print(f"\nüìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ bullish crosses:")
            if not recent_crosses.empty:
                for date, row in recent_crosses.iterrows():
                    print(f"  {date.strftime('%Y-%m-%d')}: —Ü–µ–Ω–∞ {row['GOLD_Close']:.2f}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞")
    
    elif choice == "4":
        logger.info("üìà –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤...")
        dataset = collector.create_master_training_dataset(2)  # 2 –≥–æ–¥–∞
        
        if not dataset.empty:
            print(f"‚úÖ –ö—Ä–∞—Ç–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ–∑–¥–∞–Ω: {len(dataset)} –∑–∞–ø–∏—Å–µ–π")
            print(f"üíæ –§–∞–π–ª: {collector.master_training_file}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞")
    
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")


if __name__ == "__main__":
    main()