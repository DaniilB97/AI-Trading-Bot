# mathematical_sentiment_model.py
"""
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π –¥–ª—è RL —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–æ–ª–æ—Ç–æ–º
–û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—É–º–º–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ sentiment
"""

import numpy as np
import pandas as pd
import logging
from datetime import datetime
from typing import Dict, List, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class SentimentSource:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ sentiment"""
    name: str
    weight: float
    reliability: float
    current_value: float
    
class MathematicalSentimentAnalyzer:
    """
    –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π S(t) = Œ£ wi √ó sentiment_i(t)
    
    –ò—Å—Ç–æ—á–Ω–∏–∫–∏ sentiment —Å –≤–µ—Å–∞–º–∏:
    1. MarketAux API (–Ω–æ–≤–æ—Å—Ç–∏) - –≤—ã—Å–æ–∫–∏–π –≤–µ—Å
    2. Fear & Greed Index - —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å  
    3. Golden Cross —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Å
    4. VIX momentum - –Ω–∏–∑–∫–∏–π –≤–µ—Å
    5. Price momentum - –Ω–∏–∑–∫–∏–π –≤–µ—Å
    """
    
    def __init__(self, custom_weights: dict = None, custom_reliabilities: dict = None):
        self.sources = self._initialize_sources(custom_weights, custom_reliabilities)
        self.history = []

        logger.info("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ–ª—å sentiment –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _initialize_sources(self, custom_weights: dict = None, custom_reliabilities: dict = None) -> dict:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –≤–µ—Å–∞–º–∏"""
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–µ—Å–∞ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã custom)
        default_weights = {
            'marketaux_news': 0.35,
            'fear_greed_index': 0.25, 
            'golden_cross_trend': 0.20,
            'vix_momentum': 0.10,
            'price_momentum': 0.10
        }
        
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ reliability (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã custom)
        default_reliabilities = {
            'marketaux_news': 0.8,
            'fear_greed_index': 0.9,
            'golden_cross_trend': 0.7,
            'vix_momentum': 0.6,
            'price_momentum': 0.5
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º custom –≤–µ—Å–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        weights = custom_weights if custom_weights else default_weights
        reliabilities = custom_reliabilities if custom_reliabilities else default_reliabilities
        
        sources = {
            'marketaux_news': SentimentSource(
                name='MarketAux News',
                weight=weights['marketaux_news'],
                reliability=reliabilities['marketaux_news'],
                current_value=0.0
            ),
            'fear_greed_index': SentimentSource(
                name='Fear & Greed Index',
                weight=weights['fear_greed_index'],
                reliability=reliabilities['fear_greed_index'],
                current_value=0.0
            ),
            'golden_cross_trend': SentimentSource(
                name='Golden Cross Trend',
                weight=weights['golden_cross_trend'],
                reliability=reliabilities['golden_cross_trend'],
                current_value=0.0
            ),
            'vix_momentum': SentimentSource(
                name='VIX Momentum',
                weight=weights['vix_momentum'],
                reliability=reliabilities['vix_momentum'],
                current_value=0.0
            ),
            'price_momentum': SentimentSource(
                name='Price Momentum',
                weight=weights['price_momentum'],
                reliability=reliabilities['price_momentum'],
                current_value=0.0
            )
        }
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
        total_weight = sum(source.weight for source in sources.values())
        if abs(total_weight - 1.0) > 1e-6:
            for source in sources.values():
                source.weight /= total_weight
        
        return sources
    
    def update_marketaux_sentiment(self, marketaux_sentiment: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ sentiment –æ—Ç MarketAux API"""
        self.sources['marketaux_news'].current_value = np.clip(marketaux_sentiment, -1, 1)
        logger.debug(f"üì∞ MarketAux sentiment –æ–±–Ω–æ–≤–ª–µ–Ω: {marketaux_sentiment:.3f}")
    
    def update_fear_greed_sentiment(self, fear_greed_value: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Fear & Greed Index (0-100 ‚Üí -1 to 1)"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 0-100 –≤ -1 –¥–æ 1
        if fear_greed_value <= 25:
            normalized = -1 + (fear_greed_value / 25) * 0.5  # 0-25 ‚Üí -1 to -0.5
        elif fear_greed_value <= 75:
            normalized = -0.5 + ((fear_greed_value - 25) / 50) * 1  # 25-75 ‚Üí -0.5 to 0.5
        else:
            normalized = 0.5 + ((fear_greed_value - 75) / 25) * 0.5  # 75-100 ‚Üí 0.5 to 1
        
        self.sources['fear_greed_index'].current_value = normalized
        logger.debug(f"üò∞ Fear&Greed sentiment –æ–±–Ω–æ–≤–ª–µ–Ω: {fear_greed_value} ‚Üí {normalized:.3f}")
    
    def update_golden_cross_sentiment(self, golden_cross_trend: float, ma_spread: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Golden Cross sentiment"""
        # –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç —Ç—Ä–µ–Ω–¥–∞ (-1, 0, 1)
        base_sentiment = golden_cross_trend * 0.5  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ 0.5 –¥–ª—è —É–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (ma_spread)
        strength_modifier = np.tanh(ma_spread)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö -1 to 1
        
        final_sentiment = base_sentiment + (strength_modifier * 0.3)
        self.sources['golden_cross_trend'].current_value = np.clip(final_sentiment, -1, 1)
        
        logger.debug(f"üèÜ Golden Cross sentiment: trend={golden_cross_trend} + spread={ma_spread:.3f} ‚Üí {final_sentiment:.3f}")
    
    def update_vix_sentiment(self, vix_change: float, vix_level: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VIX momentum sentiment"""
        # VIX —Ä–æ—Å—Ç = —Å—Ç—Ä–∞—Ö = –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π sentiment –¥–ª—è –∑–æ–ª–æ—Ç–∞ (–æ–±—ã—á–Ω–æ)
        # –ù–æ –≤—ã—Å–æ–∫–∏–π VIX –∏–Ω–æ–≥–¥–∞ = demand for safe haven = –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–ª—è –∑–æ–ª–æ—Ç–∞
        
        # Momentum –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        momentum_sentiment = -np.tanh(vix_change * 10)  # VIX —Ä–æ—Å—Ç = –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
        
        # Level –∫–æ–º–ø–æ–Ω–µ–Ω—Ç  
        if vix_level > 30:  # –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–∞—Ö
            level_sentiment = 0.3  # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –¥–ª—è –∑–æ–ª–æ—Ç–∞ (safe haven)
        elif vix_level > 20:
            level_sentiment = 0.1
        else:
            level_sentiment = -0.1  # –ù–∏–∑–∫–∏–π —Å—Ç—Ä–∞—Ö = –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –¥–ª—è –∑–æ–ª–æ—Ç–∞
        
        combined_sentiment = 0.7 * momentum_sentiment + 0.3 * level_sentiment
        self.sources['vix_momentum'].current_value = np.clip(combined_sentiment, -1, 1)
        
        logger.debug(f"üìâ VIX sentiment: change={vix_change:.4f}, level={vix_level:.1f} ‚Üí {combined_sentiment:.3f}")
    
    def update_price_momentum_sentiment(self, price_change_1h: float, price_change_5h: float) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ price momentum sentiment"""
        # –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–π momentum
        short_momentum = np.tanh(price_change_1h * 20)
        
        # –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–π momentum  
        medium_momentum = np.tanh(price_change_5h * 10)
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Å –≤–µ—Å–∞–º–∏
        combined_sentiment = 0.6 * short_momentum + 0.4 * medium_momentum
        self.sources['price_momentum'].current_value = np.clip(combined_sentiment, -1, 1)
        
        logger.debug(f"‚ö° Price momentum: 1h={price_change_1h:.4f}, 5h={price_change_5h:.4f} ‚Üí {combined_sentiment:.3f}")
    
    def calculate_composite_sentiment(self) -> Tuple[float, Dict[str, float]]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: S(t) = Œ£ wi √ó sentiment_i(t)
        
        Returns:
            Tuple[float, Dict]: (composite_sentiment, source_contributions)
        """
        composite_sentiment = 0.0
        source_contributions = {}
        
        for name, source in self.sources.items():
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤–µ—Å –∏ reliability
            contribution = source.weight * source.current_value * source.reliability
            composite_sentiment += contribution
            source_contributions[name] = contribution
            
            logger.debug(f"   {source.name}: {source.current_value:.3f} √ó {source.weight:.2f} √ó {source.reliability:.2f} = {contribution:.4f}")
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
        composite_sentiment = np.clip(composite_sentiment, -1, 1)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        timestamp = datetime.now()
        self.history.append({
            'timestamp': timestamp,
            'composite_sentiment': composite_sentiment,
            'sources': {name: source.current_value for name, source in self.sources.items()},
            'contributions': source_contributions
        })
        
        #logger.info(f"üßÆ Composite sentiment: {composite_sentiment:.3f}") —É–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å 
        return composite_sentiment, source_contributions
    
    def get_sentiment_breakdown(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        breakdown = {}
        for name, source in self.sources.items():
            breakdown[name] = {
                'value': source.current_value,
                'weight': source.weight,
                'reliability': source.reliability,
                'weighted_contribution': source.current_value * source.weight * source.reliability
            }
        return breakdown

    def get_sentiment_confidence(self) -> float:
        values = [source.current_value for source in self.sources.values()]
        std_dev = np.std(values)
        return max(0, 1 - std_dev)
    
    def update_all_sources(self, data_row: pd.Series) -> float:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞—Å—á–µ—Ç composite sentiment
        
        Args:
            data_row: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏
            
        Returns:
            float: Composite sentiment
        """
        try:
            # MarketAux sentiment (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if 'sentiment' in data_row and not pd.isna(data_row['sentiment']):
                self.update_marketaux_sentiment(data_row['sentiment'])
            
            # Fear & Greed (—á–µ—Ä–µ–∑ VIX –∫–∞–∫ –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ FG –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
            if 'VIX_Close' in data_row:
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: VIX ‚Üí Fear & Greed –ø—Ä–æ–∫—Å–∏
                vix_value = data_row['VIX_Close']
                fear_greed_proxy = max(0, min(100, 100 - (vix_value - 10) * 3))  # VIX 10-40 ‚Üí FG 100-10
                self.update_fear_greed_sentiment(fear_greed_proxy)
            
            # Golden Cross
            if 'golden_cross_trend' in data_row and 'ma_spread_normalized' in data_row:
                self.update_golden_cross_sentiment(
                    data_row['golden_cross_trend'], 
                    data_row['ma_spread_normalized']
                )
            
            # VIX momentum
            if 'VIX_change' in data_row and 'VIX_Close' in data_row:
                self.update_vix_sentiment(data_row['VIX_change'], data_row['VIX_Close'])
            
            # Price momentum
            if 'Price_Change_1' in data_row and 'Price_Change_5' in data_row:
                self.update_price_momentum_sentiment(
                    data_row['Price_Change_1'], 
                    data_row['Price_Change_5']
                )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π sentiment
            composite_sentiment, _ = self.calculate_composite_sentiment()
            return composite_sentiment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sentiment: {e}")
            return 0.0
    
    def get_sentiment_confidence(self) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ sentiment –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        values = [source.current_value for source in self.sources.values()]
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∫–∞–∫ –º–µ—Ä–∞ —Ä–∞–∑–±—Ä–æ—Å–∞
        std_dev = np.std(values)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ confidence (–Ω–∏–∑–∫–∏–π —Ä–∞–∑–±—Ä–æ—Å = –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
        confidence = max(0, 1 - std_dev)
        
        return confidence
    
    def get_sentiment_history(self, last_n: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ sentiment"""
        return self.history[-last_n:] if self.history else []


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ RL –º–æ–¥–µ–ª—å
def get_enhanced_sentiment(analyzer: MathematicalSentimentAnalyzer, data_row: pd.Series) -> Tuple[float, float]:
    """
    –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ sentiment —Å confidence
    –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
    
    Args:
        analyzer: –£–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä MathematicalSentimentAnalyzer
        data_row: –°—Ç—Ä–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
        
    Returns:
        Tuple[float, float]: (sentiment_value, confidence)
    """
    sentiment = analyzer.update_all_sources(data_row)
    confidence = analyzer.get_sentiment_confidence()
    
    return sentiment, confidence


if __name__ == "__main__":
    print("‚úÖ Mathematical Sentiment Model –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    print("=" * 50)
    
    analyzer = MathematicalSentimentAnalyzer()
    
    # –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    analyzer.update_marketaux_sentiment(0.3)
    analyzer.update_fear_greed_sentiment(75)
    analyzer.update_golden_cross_sentiment(1.0, -0.5)
    analyzer.update_vix_sentiment(-0.02, 18.5)
    analyzer.update_price_momentum_sentiment(0.001, 0.005)
    
    # –†–∞—Å—á–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ sentiment
    composite, contributions = analyzer.calculate_composite_sentiment()
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"–ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π sentiment: {composite:.3f}")
    print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {analyzer.get_sentiment_confidence():.3f}")
    
    print(f"\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:")
    breakdown = analyzer.get_sentiment_breakdown()
    for source, details in breakdown.items():
        print(f"  {source}:")
        print(f"    –ó–Ω–∞—á–µ–Ω–∏–µ: {details['value']:.3f}")
        print(f"    –í–∫–ª–∞–¥: {details['weighted_contribution']:.4f}")